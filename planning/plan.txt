## Phase 1 â€“ MVP Foundations
- [DONE] Set up Django project with Django REST Framework.
- [ ] Create `User` model (registration, login, JWT authentication).
- [DONE] Set up React frontend with login/register pages.
- [ ] Connect frontend to backend API.

## Phase 2 â€“ Core Game Setup
- [ ] Implement `Game` model (max players, chips in pot, betting stage, game code).
- [ ] Implement `Player` model (links User to Game, chips, seat, folded/all-in states).
- [ ] API endpoints to create/join a game.
- [ ] Basic frontend poker table UI (static cards, seats).

## Phase 3 â€“ Game Logic
- [ ] Backend poker logic: deal cards, betting rounds, determine winner.
- [ ] Update game state in DB and expose via API.
- [ ] Frontend updates table based on API polling.

## Phase 4 â€“ Real-time Multiplayer
- [ ] Add WebSockets using Django Channels.
- [ ] Sync game state in real time (bets, cards revealed).
- [ ] Handle concurrency (turns, timeouts).

## Phase 5 â€“ Extras & Polish
- [ ] Matchmaking/lobby system.
- [ ] Chips/currency system with leaderboard.
- [ ] AI/bot players for solo play.
- [ ] Deploy app (Docker + Render/Heroku).
- [ ] Add unit + integration tests.

---

# Database Models

## User
- id (PK)
- username
- email
- password_hash
- created_at

## Game
- id (PK)
- game_code (unique)
- max_players (int)
- is_full (bool)
- chips_in_pot (int)
- current_betting_stage (enum: preflop, flop, turn, river, showdown)
- status (enum: waiting, in_progress, finished)
- created_at

## Player
- id (PK)
- user_id (FK â†’ User.id)
- game_id (FK â†’ Game.id)
- seat_number (int)
- chips (int)
- current_bet (int)
- is_folded (bool)
- is_all_in (bool)

---

# Notes
- Enforce uniqueness on (user_id, game_id) in Player.
- Game limited to `max_players` (usually 6).
- Extendable with Action history table later:
  - Action(id, player_id, game_id, round, type [fold, bet, raise, call], amount, timestamp)


CHATGPT PROMT FOR HELP:
'''
You are helping me build a programming project called **6 Seats Open**, a full-stack multiplayer poker web app.
When possible always explain to me what to do and why it works rather than giving me AI slop code.

ðŸ›  Tech stack:
- Frontend: React
- Backend: Django + Django REST Framework
- Real-time: Django Channels (WebSockets)
- Database: PostgreSQL (or SQLite for dev)
- Deployment: Docker + Render/Heroku

ðŸŽ¯ Goals:
- Show full-stack + real-time multiplayer skills
- Project name: "6 Seats Open"

ðŸ“‚ Repo structure:
- /frontend â†’ React
- /backend â†’ Django
- /docs â†’ diagrams, plans

ðŸ“‘ Database models:
stage_choices = [
    (0, 'Pre-flop'),
    (1, 'Flop'),
    (2, 'Turn'),
    (3, 'River'),
    (4, 'Showdown')
]


class CustomUser(AbstractUser):
    chips = models.PositiveIntegerField(default=1000)

    def __str__(self):
        return self.username


class TableTypeModel(models.Model):
    big_blind = models.PositiveIntegerField()
    small_blind = models.PositiveIntegerField()
    min_buy_in = models.PositiveIntegerField()
    max_buy_in = models.PositiveIntegerField()

class PotModel(models.Model):
    game = models.ForeignKey('GameModel', on_delete=models.CASCADE)
    players = models.ManyToManyField('PlayerModel', related_name='pots')
    pot_money = models.PositiveIntegerField(default=0)
    closed = models.BooleanField(default=False)

    def add_chips(self, amount):
        '''Add chips to this pot'''
        self.pot_money = models.F('pot_money') + amount
        self.save(update_fields=['pot_money'])

class GameModel(models.Model):
    table_type = models.ForeignKey('TableTypeModel', on_delete=models.CASCADE)
    current_turn = models.ForeignKey('PlayerModel', on_delete=models.CASCADE)
    private = models.BooleanField(default=False)
    is_full = models.BooleanField(default=False)
    betting_stage = models.PositiveSmallIntegerField(choices=stage_choices,default=0)


class PlayerModel(models.Model):
    user = models.ForeignKey('api.CustomUser', on_delete=models.CASCADE)
    game = models.ForeignKey('GameModel', on_delete=models.CASCADE, null=True)
    chips_last_claimed = models.DateTimeField()
    seat_number = models.PositiveIntegerField(null=True)
    chips = models.PositiveIntegerField(default=500)
    chip_in_play = models.PositiveIntegerField(null=True)
    current_bet = models.PositiveIntegerField(null=True)
    all_in = models.BooleanField(default=False)
    is_folded = models.BooleanField(default=False)
    had_acted = models.BooleanField(default=False)
    total_round_bet = models.PositiveIntegerField(default=0)


ðŸ—‚ Project phases:
1. MVP Foundations (auth, React setup, APIs)
2. Core Game Setup (Game + Player models, create/join)
3. Game Logic (poker rules, state updates)
4. Real-time Multiplayer (WebSockets, turns, timeouts)
5. Extras & Polish (leaderboards, bots, deployment)

Current Stage: Core Game Setup

âœ… Notes:
- Users register/login, then join/create a poker game
- Game max = 6 players
- Player links User â†” Game
- Use JWT authentication
- Each game has real-time betting & state sync
- Tagline: "6 Seats Open â€“ Real-time poker for six players, built with React & Django."
'''