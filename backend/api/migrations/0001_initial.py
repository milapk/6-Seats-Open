# Generated by Django 5.2.4 on 2025-08-12 19:42

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='GameModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('private', models.BooleanField(default=False)),
                ('is_full', models.BooleanField(default=False)),
                ('betting_stage', models.PositiveSmallIntegerField(choices=[(0, 'Pre-flop'), (1, 'Flop'), (2, 'Turn'), (3, 'River'), (4, 'Showdown')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='TableTypeModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('big_blind', models.PositiveIntegerField()),
                ('small_blind', models.PositiveIntegerField()),
                ('min_buy_in', models.PositiveIntegerField()),
                ('max_buy_in', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('chips', models.PositiveIntegerField(default=1000)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PlayerModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chips_last_claimed', models.DateTimeField()),
                ('seat_number', models.PositiveIntegerField(null=True)),
                ('chips', models.PositiveIntegerField(default=500)),
                ('chip_in_play', models.PositiveIntegerField(null=True)),
                ('current_bet', models.PositiveIntegerField(null=True)),
                ('all_in', models.BooleanField(default=False)),
                ('is_folded', models.BooleanField(default=False)),
                ('had_acted', models.BooleanField(default=False)),
                ('total_round_bet', models.PositiveIntegerField(default=0)),
                ('game', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.gamemodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='gamemodel',
            name='current_turn',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.playermodel'),
        ),
        migrations.CreateModel(
            name='PotModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pot_money', models.PositiveIntegerField(default=0)),
                ('closed', models.BooleanField(default=False)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.gamemodel')),
                ('players', models.ManyToManyField(related_name='pots', to='api.playermodel')),
            ],
        ),
        migrations.AddField(
            model_name='gamemodel',
            name='table_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.tabletypemodel'),
        ),
    ]
